generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Permission {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  roles Role[] // Relacionamento direto com papéis (roles)

  @@map("permissions")
}

model Role {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  permissions Permission[] // Lista de permissões associadas ao papel
  users       User[] // Lista de usuários com esse papel

  @@map("roles")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  firstname String
  lastname  String
  email     String   @unique
  cpf       String   @unique
  password  String
  dt_birth  DateTime

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  roles   Role[]
  courses Course[]

  // Relação de professor
  teacherInvoices Invoice[] @relation(name: "TeacherInvoices")

  // Relação de estudante
  studantInvoices Invoice[] @relation(name: "StudantInvoices")

  @@map("users")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  products Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       String
  description String
  amount      Int
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())

  category    Category @relation(fields: [category_id], references: [id])
  category_id String
  items       Item[]

  @@map("products")
}

model Item {
  id         String    @id @default(uuid())
  amount     Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  product    Product @relation(fields: [product_id], references: [id])
  product_id String

  @@map("items")
}

model Course {
  id          String @id @default(uuid())
  name        String
  description String
  price       Float
  teacher     User   @relation(fields: [teacher_id], references: [id])
  teacher_id  String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  invoices Invoice[]
}

model Invoice {
  id           String    @id @default(uuid())
  total        Float
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
  payment_type String

  teacher    User   @relation(name: "TeacherInvoices", fields: [teacher_id], references: [id])
  teacher_id String
  studant    User   @relation(name: "StudantInvoices", fields: [studant_id], references: [id])
  studant_id String
  course     Course @relation(fields: [course_id], references: [id])
  course_id  String
}
